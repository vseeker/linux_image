heat_template_version: 2013-05-23

description: >
  a stack that contains 3 servers which attached a volume in a new neutron net, private_net_cidr may conflict with each other

parameters:
  image:
    type: string
    default: centos
    description: Name of image to use for servers
  flavor:
    type: string
    default: compute-2
    description: Flavor to use for servers
  public_net:
    type: string
    default: admin_floating_net
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    default: private_net
    description: Name of private network to be created
  private_net_cidr:
    type: string
    default: 192.168.12.0/24
    description: Private network address (CIDR notation)
  password:
    default: 123456..
    description: SSH password
    hidden: true
    type: string
  metadata:
    type: json
    default: {}

  vol_size:
    type: number
    description: The size of the Cinder volume (GB)
    default: 100


resources:

  my_vol1:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: vol_size }

  my_vol2:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: vol_size }

  my_vol3:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: vol_size }

  vol_att1:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server1 }
      volume_id: { get_resource: my_vol1 }
      mountpoint: /dev/vdb

  vol_att2:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server2 }
      volume_id: { get_resource: my_vol2 }
      mountpoint: /dev/vdb

  vol_att3:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server3 }
      volume_id: { get_resource: my_vol3 }
      mountpoint: /dev/vdb

  cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        chpasswd: {expire: 'False'}
        manage_etc_hosts: 'False'
        password: {get_param: password}
        ssh_pwauth: 'True'


  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  server1:
    type: OS::Nova::Server
    properties:
      name: Server1
      image: { get_param: image }
      flavor: { get_param: flavor }
      metadata: {get_param: metadata}
      networks:
        - port: { get_resource: server1_port }
      user_data: {get_resource: cloud_config}
      user_data_format: RAW

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server1_port }

  server2:
    type: OS::Nova::Server
    properties:
      name: Server2
      image: { get_param: image }
      flavor: { get_param: flavor }
      metadata: {get_param: metadata}
      networks:
        - port: { get_resource: server2_port }
      user_data: {get_resource: cloud_config}
      user_data_format: RAW

  server2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  server2_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server2_port }


  server3:
    type: OS::Nova::Server
    properties:
      name: Server3
      image: { get_param: image }
      flavor: { get_param: flavor }
      metadata: {get_param: metadata}
      networks:
        - port: { get_resource: server3_port }
      user_data: {get_resource: cloud_config}
      user_data_format: RAW

  server3_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  server3_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server3_port }

outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
  server1_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ server1_floating_ip, floating_ip_address ] }
  server2_private_ip:
    description: IP address of server2 in private network
    value: { get_attr: [ server2, first_address ] }
  server2_public_ip:
    description: Floating IP address of server2 in public network
    value: { get_attr: [ server2_floating_ip, floating_ip_address ] }

  server3_private_ip:
    description: IP address of server2 in private network
    value: { get_attr: [ server2, first_address ] }
  server3_public_ip:
    description: Floating IP address of server2 in public network
    value: { get_attr: [ server2_floating_ip, floating_ip_address ] }
